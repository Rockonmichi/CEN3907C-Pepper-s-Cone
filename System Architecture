# Pepper's Cone Display - System Architecture

This document outlines the architectural design of the Pepper's Cone Display system, focusing on the components we want to implement.

## System Overview

The Pepper's Cone Display system creates holographic visualizations by projecting specially processed images onto a horizontal display with a cone-shaped reflector. The system architecture is designed to handle the entire pipeline from content input to final display output.

## Core Components

### 1. Processing System

The Processing System handles the transformation of input content (3D models, videos) into the format required for the Pepper's Cone effect.

#### 1.1 Content Input Manager

```csharp
public class ContentInputManager : MonoBehaviour
{
    // Handles loading of 3D models and video streams
    [SerializeField] private ModelConfig modelConfig;
    [SerializeField] private VideoConfig videoConfig;
    
    private Dictionary loadedModels = new Dictionary();
    private Dictionary loadedVideos = new Dictionary();
    
    // Methods for loading, caching, and validating content
    // ...
}
```

#### 1.2 Transformation Engine

Implements the mathematical transformations required to convert standard visual content to the distorted format needed for the Pepper's Cone effect.

```csharp
public class TransformationEngine : MonoBehaviour
{
    [SerializeField] private Material holographicMaterial;
    [SerializeField] private float distortionFactor = 0.3f;
    [SerializeField] private Vector2 centerOffset = Vector2.zero;
    
    private Camera renderCamera;
    private RenderTexture outputTexture;
    
    // Methods for applying distortion based on cone geometry
    // ...
}
```

#### 1.3 Video Processing System

Python-based system for video stream processing and preparation.

```python
# video_processor.py
import cv2
import numpy as np

class VideoProcessor:
    def __init__(self, config_path):
        with open(config_path, 'r') as file:
            self.config = json.load(file)
        
        self.distortion_matrix = self._calculate_distortion_matrix()
    
    def process_frame(self, frame):
        # Apply background removal if enabled
        if self.config['remove_background']:
            frame = self._remove_background(frame)
        
        # Apply perspective distortion for cone effect
        height, width = frame.shape[:2]
        return cv2.warpPerspective(frame, self.distortion_matrix, (width, height))
    
    # Helper methods for various processing steps
    # ...
```

### 2. Persistent State

The Persistent State system manages the storage, retrieval, and validation of system data.

#### 2.1 Configuration Management

```csharp
[System.Serializable]
public class ModelConfig
{
    public ModelEntry[] models;
    public int defaultModelIndex;
    public string version;
}

[System.Serializable]
public class ModelEntry
{
    public string name;
    public string path;
    public string thumbnail;
    public string description;
}

public class ConfigManager : MonoBehaviour
{
    [SerializeField] private TextAsset modelConfigJson;
    [SerializeField] private TextAsset displayConfigJson;
    
    private ModelConfig modelConfig;
    private DisplayConfig displayConfig;
    
    private void Awake()
    {
        // Load and parse configurations
        modelConfig = JsonUtility.FromJson(modelConfigJson.text);
        displayConfig = JsonUtility.FromJson(displayConfigJson.text);
        
        // Validate configurations
        ValidateConfigurations();
    }
    
    // Configuration validation and access methods
    // ...
}
```

#### 2.2 Asset Management System

```csharp
public class AssetManager : MonoBehaviour
{
    private ConfigManager configManager;
    private Dictionary modelCache = new Dictionary();
    
    // Methods for loading, caching, and verifying assets
    public GameObject LoadModel(string modelId)
    {
        // Check cache first
        if (modelCache.ContainsKey(modelId))
        {
            return modelCache[modelId];
        }
        
        // Get model path from config
        string path = configManager.GetModelPath(modelId);
        if (string.IsNullOrEmpty(path))
        {
            Debug.LogError($"Model ID not found: {modelId}");
            return null;
        }
        
        // Load model
        GameObject model = Resources.Load(path);
        if (model == null)
        {
            Debug.LogError($"Failed to load model at path: {path}");
            return null;
        }
        
        // Cache model
        modelCache[modelId] = model;
        return model;
    }
    
    // Other asset management methods
    // ...
}
```

### 3. External Interface

The External Interface provides user interaction capabilities and connects to external systems.

#### 3.1 User Interface

```csharp
public class UserInterfaceController : MonoBehaviour
{
    [SerializeField] private Transform modelButtonContainer;
    [SerializeField] private Button modelButtonPrefab;
    [SerializeField] private Button videoModeButton;
    [SerializeField] private Slider distortionSlider;
    
    private ConfigManager configManager;
    private ContentDisplayManager displayManager;
    
    private void Start()
    {
        // Initialize UI elements
        InitializeModelButtons();
        
        // Setup event listeners
        videoModeButton.onClick.AddListener(OnVideoModeToggle);
        distortionSlider.onValueChanged.AddListener(OnDistortionChanged);
    }
    
    private void InitializeModelButtons()
    {
        // Create buttons for all available models
        ModelConfig config = configManager.GetModelConfig();
        foreach (var model in config.models)
        {
            Button button = Instantiate(modelButtonPrefab, modelButtonContainer);
            button.GetComponentInChildren().text = model.name;
            button.onClick.AddListener(() => OnModelSelected(model.path));
            
            // Load thumbnail if available
            if (!string.IsNullOrEmpty(model.thumbnail))
            {
                Sprite thumbnail = Resources.Load(model.thumbnail);
                if (thumbnail != null)
                {
                    button.GetComponent().sprite = thumbnail;
                }
            }
        }
    }
    
    // Event handlers for user interactions
    // ...
}
```

#### 3.2 External Communication Layer

Placeholder for future integration with video conferencing platforms.

```csharp
public class ExternalCommunicationManager : MonoBehaviour
{
    // This class will handle integration with platforms like Zoom
    // Currently a placeholder for future implementation
    
    [SerializeField] private string apiEndpoint;
    [SerializeField] private int connectionPort = 8080;
    
    private bool isConnected = false;
    
    // Methods for establishing connections, handling data transfer, etc.
    // ...
}
```

### 4. Internal Systems

#### 4.1 Content Display Manager

```csharp
public class ContentDisplayManager : MonoBehaviour
{
    [SerializeField] private Material holographicMaterial;
    [SerializeField] private RawImage displaySurface;
    [SerializeField] private Camera renderCamera;
    
    private AssetManager assetManager;
    private GameObject currentModel;
    private VideoPlayer videoPlayer;
    private RenderTexture outputTexture;
    
    private DisplayMode currentMode = DisplayMode.Model;
    
    public enum DisplayMode
    {
        Model,
        Video,
        LiveStream
    }
    
    // Methods for handling different content types and display modes
    // ...
}
```

#### 4.2 Error Handling System

```csharp
public static class ErrorHandler
{
    public enum ErrorSeverity
    {
        Info,
        Warning,
        Error,
        Critical
    }
    
    private static List errorLog = new List();
    
    public static void LogError(string message, ErrorSeverity severity = ErrorSeverity.Error)
    {
        string timestamp = System.DateTime.Now.ToString("yyyy-MM-dd HH:mm:ss");
        string formattedMessage = $"[{timestamp}][{severity}] {message}";
        
        errorLog.Add(formattedMessage);
        Debug.Log(formattedMessage);
        
        // For critical errors, notify user
        if (severity == ErrorSeverity.Critical)
        {
            NotifyUser(message);
        }
    }
    
    // Error reporting and recovery methods
    // ...
}
```

## Data Flow

1. **Input Stage**
   - User selects content (3D model or video) through the UI
   - Content is loaded from persistent storage
   - Content is validated for integrity

2. **Processing Stage**
   - 3D model is positioned and scaled appropriately
   - Video is processed for background removal if applicable
   - Perspective transformation is applied

3. **Output Stage**
   - Transformed content is rendered to a texture
   - Shader applies final distortion for cone effect
   - Content is displayed on the screen

4. **Feedback Loop**
   - System monitors performance and errors
   - User can adjust parameters through UI
   - Changes are applied in real-time

## Communication Protocol

The components communicate through a combination of:

1. **Direct Method Calls** for tightly coupled components
2. **Unity Events** for loosely coupled interactions
3. **ScriptableObjects** for data sharing between components

```csharp
// Example of event-based communication
public class DisplayEventSystem : MonoBehaviour
{
    // Events for system communication
    public static event Action OnModelSelected;
    public static event Action OnDistortionFactorChanged;
    public static event Action OnDisplayModeChanged;
    
    // Event triggers
    public static void TriggerModelSelected(string modelId)
    {
        OnModelSelected?.Invoke(modelId);
    }
    
    // Other event trigger methods
    // ...
}
```

## Error Handling & Recovery

The system implements several layers of error handling:

1. **Prevention**: Input validation before processing
2. **Detection**: Runtime error checking during operations
3. **Recovery**: Fallback mechanisms for failed operations
4. **Reporting**: Logging system for diagnosis

```csharp
// Example of fallback mechanism
public GameObject LoadModelWithFallback(string modelId)
{
    GameObject model = assetManager.LoadModel(modelId);
    
    if (model == null)
    {
        ErrorHandler.LogError($"Failed to load model: {modelId}", ErrorHandler.ErrorSeverity.Warning);
        
        // Try to load default model
        string defaultModelId = configManager.GetDefaultModelId();
        model = assetManager.LoadModel(defaultModelId);
        
        if (model == null)
        {
            // Critical error - even default model failed
            ErrorHandler.LogError("Failed to load default model", ErrorHandler.ErrorSeverity.Critical);
            return CreateEmergencyFallbackModel();
        }
    }
    
    return model;
}
```

## Physical System Integration

The software architecture is designed to integrate with the physical display system:

1. **Display Calibration**: Parameters can be adjusted to match the physical cone dimensions
2. **Environmental Adaptation**: Brightness and contrast settings adapt to ambient lighting
3. **Hardware Monitoring**: System checks for display connection and capabilities

## Future Architecture Expansion

The pre-alpha architecture is designed to accommodate future enhancements:

1. **Video Conference Integration**: API hooks for Zoom and other platforms
2. **Advanced Image Processing**: Machine learning-based background removal
3. **Multi-Display Support**: Synchronized content across multiple Pepper's Cone displays
4. **Remote Management**: Web-based control interface for classroom administrators

## Conclusion

This architecture document outlines the core components and interactions of the Pepper's Cone Display system as implemented in the pre-alpha build. The modular design allows for incremental development and testing, with clear interfaces between components to facilitate system evolution.
